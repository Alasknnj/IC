/*
 * Software License Agreement (BSD License)
 *
 *  Hunter Allen <hunter.allen@vanderbilt.edu>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage, Inc. nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

#include <string>
#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <kdl_parser/kdl_parser.hpp>


double dt = 0.05;
double odomX = 10;
double odomY = 10;
double odomAngle = 10;


void velCallBack(const geometry_msgs::Twist msg){
odomX += cos(odomAngle)*msg.linear.x*dt;
odomY += sin(odomAngle)*msg.linear.x*dt;
odomAngle += msg.angular.z*dt;

}



int main( int argc, char* argv[] )
{
  	ros::init(argc, argv, "rviz_pioneer_publisher" );
  	ros::NodeHandle n;
ROS_INFO("i am out of the loop");
  	ros::Publisher joint_state_publisher = n.advertise<sensor_msgs::JointState>("joint_states",1000);
	
	//ros::Subscriber sub = n.subscribe("cmd_vel",5,velCallBack);

 	tf::TransformBroadcaster broadcaster;
    ros::Rate loop_rate(30);

    // message declarations
    geometry_msgs::TransformStamped odom_trans;
    sensor_msgs::JointState joint_state;
    odom_trans.header.frame_id = "gas_station";
    odom_trans.child_frame_id = "base_link";

  while (ros::ok())
  {
ROS_INFO("I am in the loop, at the start");
  	joint_state.header.stamp = ros::Time::now();
  	joint_state.name.resize(6); //Pioneer has 6 joint state definitions. 
  	joint_state.position.resize(6);

        joint_state.name[0] = "base_top_joint";
  	joint_state.position[0] = 0;

  	joint_state.name[1] = "base_swivel_joint";
  	joint_state.position[1] = 0;

  	joint_state.name[2] = "swivel_hubcap_joint";
  	joint_state.position[2] = 0;

  	joint_state.name[3] = "center_wheel_joint";
  	joint_state.position[3] = 0; 

  	joint_state.name[4] = "base_front_joint";
  	joint_state.position[4] = 0;

  	joint_state.name[5] = "base_back_joint";
  	joint_state.position[5] = 0;

  	//joint_state.name[6] = "p3at_back_right_wheel_joint";
  	//joint_state.position[6] = 0;

  	//joint_state.name[7] = "p3at_back_left_wheel_joint";
  	//joint_state.position[7] = 0;

  	//joint_state.name[8] = "p3at_front_right_wheel_joint";
  	//joint_state.position[8] = 0;

  	//joint_state.name[9] = "p3at_front_left_wheel_joint";
  	//joint_state.position[9] = 0;
ROS_INFO("i am in the loop, at the middle, before tf time stamp");
      odom_trans.header.stamp = ros::Time::now();
      odom_trans.transform.translation.x = 12;
      odom_trans.transform.translation.y = 12;
      odom_trans.transform.translation.z = 0.205;
      odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(12);
    ROS_INFO("I am before publishing");
  	//send the joint state information
  	joint_state_publisher.publish(joint_state);
      broadcaster.sendTransform(odom_trans);
    
  	//adjust loop each iteration.
	//ros::spinOnce();
ROS_INFO("I am after publishing");
  	//loop_rate.sleep(); Problem with ros::Rate TODO: try to fix!!!
ROS_INFO("I am working");
  }//the things ros will do

  return 0; 
}//end main
